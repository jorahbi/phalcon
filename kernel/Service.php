<?phpnamespace Kernel;use Phalcon\Di\FactoryDefault;use Phalcon\Flash\Direct as Flash;use Phalcon\Mvc\Dispatcher;use Phalcon\Mvc\Model\Metadata\Memory as MetaDataAdapter;use Phalcon\Mvc\Router;use Phalcon\Mvc\Url as UrlResolver;use Phalcon\Mvc\View\Engine\Volt as VoltEngine;use Phalcon\Mvc\View;use Phalcon\Config\Adapter\Php as ConfigPhp;final class Service{    private static $container;    private static $instance;    private function __construct()    {        self::$container = new FactoryDefault();        /**         * If the configuration specify the use of metadata adapter use it or use memory otherwise         */        self::$container->setShared('modelsMetadata', function () {            return new MetaDataAdapter();        });        /**         * Configure the Volt service for rendering .volt templates         */        self::$container->setShared('voltShared', function ($view) {            $runtime = $this->get('config')->getConfig()->application->runtime;            $volt = new VoltEngine($view);            $volt->setOptions([                'compileAlways' => false,                'compiledPath' => function ($templatePath) use ($runtime) {                    $filename = md5($templatePath) . '.php';                    if (!is_dir($runtime . DIRECTORY_SEPARATOR . 'volt')) {                        @mkdir($runtime . DIRECTORY_SEPARATOR . 'volt', 0755, true);                    }                    return $runtime . DIRECTORY_SEPARATOR . 'volt' . DIRECTORY_SEPARATOR . $filename;                },            ]);            return $volt;        });        self::$container->setShared('view', function () {            $view = new View();            return $view;        });        /**         * Registering a router         */        self::$container->setShared('router', function () {            $router = new Router();            $router->setUriSource(Router::URI_SOURCE_SERVER_REQUEST_URI);            $router->removeExtraSlashes(true);            return $router;        });        /**         * The URL component is used to generate all kinds of URLs in the application         */        self::$container->setShared('url', function () {            $url = new UrlResolver();            $url->setBaseUri($this->get('config')->getConfig()->application->baseUri);            return $url;        });        /**         * Register the session flash service with the Twitter Bootstrap classes         */        self::$container->setShared('flash', function () {            return new Flash([                'error' => 'alert alert-danger',                'success' => 'alert alert-success',                'notice' => 'alert alert-info',                'warning' => 'alert alert-warning',            ]);        });        /**         * Set the default namespace for dispatcher         */        self::$container->setShared('dispatcher', function () {            return new Dispatcher();        });        self::$container->setShared('config', 'Common\\Service\\ConfigService');        $this->loaderService();    }    private function loaderService()    {        $serviceConfig = new ConfigPhp(BASE_PATH . '/common/config/service.php');        foreach ($serviceConfig as $key => $value) {            self::$container->setShared($key, $value->toArray());        }    }    /**     * Service 单例     * @return Service     */    public static function getInstance()    {        if (empty(self::$instance)) {            self::$instance = new self();        }        return self::$instance;    }    /**     * 获取容器     * @return FactoryDefault     */    public function getContainer()    {        return self::$container;    }    /**     * 设置容器对象     * @param $key     * @param $obj     */    public function setService($key, $obj)    {        $this->getContainer()->setShared($key, $obj);    }    public function getService($key)    {        return self::$container->get($key);    }}