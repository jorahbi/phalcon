<?phpnamespace Kernel;use Phalcon\Di\FactoryDefault;use Phalcon\DiInterface;use Phalcon\Mvc\Url as UrlResolver;final class Container{    private static $container;    private static $init = false;    /**     * 获取容器     * @return DiInterface     */    public static function getContainer(): DiInterface    {        if (!self::$init) {            self::$init = true;            self::$container = self::$container ?: new FactoryDefault();            self::$container->setShared('config', 'Kernel\\Service\\ConfigService');            self::$container->loadFromPhp(BASE_PATH . '/common/config/service.php');            $config = self::getService('config')->getConfig()->modules;            foreach ($config as $key => $value) {                $path = APP_PATH . '/' . $key . '/config/service.php';                if (file_exists($path)) {                    self::$container->loadFromPhp($path);                }            }            /**             * Configure the Volt service for rendering .volt templates             */            self::$container->setShared('voltShared', function ($view) {                return self::getService('fileCache')->volt($view);            });            /**             * The URL component is used to generate all kinds of URLs in the application             */            self::$container->setShared('url', function () {                $url = new UrlResolver();                $url->setBaseUri(self::getService('config')->getConfig()->application->baseUri);                return $url;            });        }        return self::$container;    }    /**     * 设置容器对象     * @param $key     * @param $obj     */    public static function setService($key, $obj)    {        self::getContainer()->setShared($key, $obj);    }    public static function getService($key)    {        return self::getContainer()->get($key);    }    public static function setContainer(DiInterface $container)    {        self::$container = $container;    }}